openapi: 3.0.0
info:
  title: Conduit
  version: '1.0'
  description: 'The Conduit Project API is a RESTful service that allows developers to interact with a social blogging platform. The API provides endpoints for managing users, articles, comments, profiles, and tags. It supports common actions such as authentication, article creation, comment posting, and user profile management'
  contact:
    url: 'https://thinkster.io'
    name: Thinkster
    email: hello@thinkster.io
  termsOfService: 'https://raw.githubusercontent.com/gothinkster/realworld/main/LICENSE'
  license:
    url: 'https://raw.githubusercontent.com/gothinkster/realworld/main/LICENSE'
    name: MIT license
servers:
  - url: 'http://localhost:3000'
paths:
  /signin:
    post:
      summary: ''
      operationId: post-signin
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Sign in
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
            examples: {}
  /signup:
    post:
      summary: ''
      operationId: post-signup
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Sign up
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: P@ssw0rd1#
                username:
                  type: string
                  example: johndoe
              required:
                - email
                - password
                - username
            examples: {}
  /tags:
    get:
      summary: ''
      operationId: tags-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: demo
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
  /users:
    post:
      summary: ''
      operationId: users-post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  name: John Doe
                  username: johndoe
                  email: johndoe@example.com
                  bio: A software developer with a passion for coding and technology.
                  image: 'https://example.com/johndoe.jpg'
              properties:
                name:
                  type: string
                  example: John Doe
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                bio:
                  type: string
                  example: A software developer with a passion for coding and technology.
                image:
                  type: string
                  example: 'https://example.com/johndoe.jpg'
                password:
                  type: string
                  x-stoplight:
                    id: 3vuourcim10ae
                  example: P@ssw0rd*1
              required:
                - name
                - username
                - email
                - password
            examples: {}
        description: ''
      description: Create resource
    get:
      summary: ''
      operationId: users-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        createdAt:
                          type: string
                          example: '2019-08-24T14:15:22Z'
                        updatedAt:
                          type: string
                        name:
                          type: string
                        username:
                          type: string
                        email:
                          type: string
                        bio:
                          type: string
                        image:
                          type: string
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_items:
                        type: integer
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
  '/users/{id}':
    parameters:
      - name: id
        in: path
        required: true
        example: 7779541a-85c3-4865-83c3-5a2cfb04c67e
        schema:
          type: string
    get:
      summary: ''
      operationId: users-get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  createdAt:
                    type: string
                    example: '2019-08-24T14:15:22Z'
                  updatedAt:
                    type: string
                    example: '2019-08-24T14:15:22Z'
                  name:
                    type: string
                    example: John Doe
                  username:
                    type: string
                    example: johndoe
                  email:
                    type: string
                    example: johndoe@example.com
                  bio:
                    type: string
                    example: A software developer with a passion for coding and technology.
                  image:
                    type: string
                    example: 'https://example.com/johndoe.jpg'
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Find resource using URL path identifier
    patch:
      summary: ''
      operationId: users-patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
      description: Edit resource using URL path identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  name: John Doe
                  username: johndoe
                  email: johndoe@example.com
                  bio: A software developer with a passion for coding and technology.
                  image: 'https://example.com/johndoe.jpg'
    delete:
      summary: ''
      operationId: users-delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Delete resource using URL path identifier
  /articles:
    post:
      summary: ''
      operationId: articles-post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
            examples: {}
      description: Create resource
    get:
      summary: ''
      operationId: articles-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        createdAt:
                          type: string
                          example: '2019-08-24T14:15:22Z'
                        updatedAt:
                          type: string
                        slug:
                          type: string
                        title:
                          type: string
                        description:
                          type: string
                        body:
                          type: string
                        tagList:
                          type: array
                          items:
                            type: object
                            properties:
                              value:
                                type: string
                        favorited:
                          type: boolean
                        favoritesCount:
                          type: integer
                  pagination:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            createdAt:
                              type: string
                            updatedAt:
                              type: string
                            name:
                              type: string
                            username:
                              type: string
                            email:
                              type: string
                            bio:
                              type: string
                            image:
                              type: string
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                          current_page:
                            type: integer
                          total_pages:
                            type: integer
                          total_items:
                            type: integer
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
  '/articles/{id}':
    parameters:
      - name: id
        in: path
        required: true
        example: 5fe007f4-7da2-4c0a-b7bc-9a05517fc2aa
        schema:
          type: string
    get:
      summary: ''
      operationId: articles-get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    createdAt:
                      type: string
                      example: '2019-08-24T14:15:22Z'
                    updatedAt:
                      type: string
                    slug:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
                    body:
                      type: string
                    tagList:
                      type: array
                      items:
                        type: object
                        properties:
                          value:
                            type: string
                    favorited:
                      type: boolean
                    favoritesCount:
                      type: integer
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Find resource using URL path identifier
    patch:
      summary: ''
      operationId: articles-patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
      description: Edit resource using URL path identifier
    delete:
      summary: ''
      operationId: articles-delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Delete resource using URL path identifier
  /comments:
    post:
      summary: ''
      operationId: comments-post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
            examples: {}
      description: Create resource
    get:
      summary: ''
      operationId: comments-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        createdAt:
                          type: string
                          example: '2019-08-24T14:15:22Z'
                        updatedAt:
                          type: string
                          example: '2019-08-24T14:15:22Z'
                        author:
                          type: object
                          properties:
                            name:
                              type: string
                            username:
                              type: string
                            email:
                              type: string
                            bio:
                              type: string
                            image:
                              type: string
                        body:
                          type: string
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_items:
                        type: integer
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
  '/comment/{id}':
    parameters:
      - name: id
        in: path
        required: true
        example: d5bc8f9f-ddbf-4d94-9731-19fd46c7e818
        schema:
          type: string
    get:
      summary: ''
      operationId: comments-get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  createdAt:
                    type: string
                    example: '2019-08-24T14:15:22Z'
                  updatedAt:
                    type: string
                    example: '2019-08-24T14:15:22Z'
                  body:
                    type: string
                    example: A software developer with a passion for open-source projects.
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Find resource using URL path identifier
    patch:
      summary: ''
      operationId: comments-patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
      description: Edit resource using URL path identifier
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
                body:
                  type: string
            examples: {}
    delete:
      summary: ''
      operationId: comments-delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Delete resource using URL path identifier
components:
  schemas:
    BaseEntity:
      type: object
      properties:
        id:
          type: string
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        createdAt:
          type: string
          example: '2019-08-24T14:15:22Z'
        updatedAt:
          type: string
          example: '2019-08-24T14:15:22Z'
      required:
        - id
        - createdAt
        - updatedAt
    User:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: johndoe@example.com
        bio:
          type: string
          example: A software developer with a passion for coding and technology.
        image:
          type: string
          example: 'https://example.com/johndoe.jpg'
      required:
        - name
        - username
        - email
    Article:
      type: object
      properties:
        slug:
          type: string
          example: Innovate-the-cross-platform-integration-for-API
        title:
          type: string
          example: 'Leveraging AI to Transform Data Analytics: Innovative Strategies for Enhanced Decision-Making'
        description:
          type: string
          example: Explore the groundbreaking advancements in machine learning that are driving the future of artificial intelligence. Delve into innovative algorithms and applications transforming
        body:
          type: string
          example: 'In recent years, the field of artificial intelligence (AI) has seen significant advancements, transforming various industries and our daily lives. From healthcare to finance, AI applications are enhancing efficiency, accuracy, and decision-making processes. Machine learning, a subset of AI, plays a crucial role in this transformation. By leveraging large datasets, machine learning algorithms can identify patterns, make predictions, and even improve over time without explicit programming.  One notable example is the use of AI in healthcare. AI-powered systems can analyze medical images with remarkable precision, assisting doctors in diagnosing diseases like cancer at an early stage. In finance, AI algorithms are revolutionizing trading strategies, risk management, and fraud detection, leading to more secure and efficient financial systems.  Moreover, AI is making strides in natural language processing (NLP), enabling more sophisticated human-computer interactions. Virtual assistants like Siri and Alexa, powered by NLP, are becoming integral parts of our lives, helping us with tasks ranging from setting reminders to controlling smart home devices.'
        tagList:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        favorited:
          type: boolean
        favoritesCount:
          type: integer
          example: 5
      required:
        - slug
        - title
        - description
        - body
    SignIn:
      title: SignIn
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: P@ssw0rd1#
      required:
        - email
        - password
    SignUp:
      title: SignUp
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: P@ssw0rd1#
        username:
          type: string
          example: johndoe
      required:
        - email
        - password
        - username
    Comment:
      type: object
      properties:
        body:
          type: string
          example: A software developer with a passion for open-source projects.
      required:
        - body
    Tag:
      title: Tag
      type: object
      properties:
        value:
          type: string
          example: demo
    ResponseError400:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError401:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError403:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError404:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError500:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
