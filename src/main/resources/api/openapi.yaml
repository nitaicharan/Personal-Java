openapi: 3.0.0
info:
  title: Conduit
  version: '1.0'
  description: 'The Conduit Project API is a RESTful service that allows developers to interact with a social blogging platform. The API provides endpoints for managing users, articles, comments, profiles, and tags. It supports common actions such as authentication, article creation, comment posting, and user profile management'
  contact:
    url: 'https://thinkster.io'
    name: Thinkster
    email: hello@thinkster.io
  termsOfService: 'https://raw.githubusercontent.com/gothinkster/realworld/main/LICENSE'
  license:
    url: 'https://raw.githubusercontent.com/gothinkster/realworld/main/LICENSE'
    name: MIT license
servers:
  - url: 'http://localhost:3000'
paths:
  /signin:
    post:
      summary: ''
      operationId: post-signin
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Sign in
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
            examples:
              Example1:
                value:
                  email: johndoe@example.com
                  password: P@ssw0rd1#
      tags:
        - post
        - auth
  /signup:
    post:
      summary: ''
      operationId: post-signup
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Sign up
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
            examples:
              Example1:
                value:
                  email: johndoe@example.com
                  password: P@ssw0rd1#
                  username: johndoe
      tags:
        - post
        - auth
  /tags:
    get:
      summary: ''
      operationId: tags-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: demo
              examples:
                Example 1:
                  value:
                    - demo
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
      tags:
        - users
        - list
  /users:
    post:
      summary: ''
      operationId: users-post
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: Location header of created model unique identifier
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example 1:
                value:
                  name: John Doe
                  username: johndoe
                  email: johndoe@example.com
                  bio: A software developer with a passion for coding and technology.
                  image: 'https://example.com/johndoe.jpg'
      description: Create resource
      tags:
        - users
        - post
    get:
      summary: ''
      operationId: users-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/BaseEntity'
                    - $ref: '#/components/schemas/User'
              examples:
                Example 1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      createdAt: '2019-08-24T14:15:22Z'
                      updatedAt: '2019-08-24T14:15:22Z'
                      name: John Doe
                      username: johndoe
                      email: johndoe@example.com
                      bio: A software developer with a passion for coding and technology.
                      image: 'https://example.com/johndoe.jpg'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
      tags:
        - users
        - list
  '/users/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: ''
      operationId: users-get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseEntity'
                  - $ref: '#/components/schemas/User'
              examples:
                Example1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
                    name: John Doe
                    username: johndoe
                    email: johndoe@example.com
                    bio: A software developer with a passion for coding and technology.
                    image: 'https://example.com/johndoe.jpg'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Find resource using URL path identifier
      tags:
        - users
        - get
    patch:
      summary: ''
      operationId: users-patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
      description: Edit resource using URL path identifier
      tags:
        - users
        - patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  name: John Doe
                  username: johndoe
                  email: johndoe@example.com
                  bio: A software developer with a passion for coding and technology.
                  image: 'https://example.com/johndoe.jpg'
    delete:
      summary: ''
      operationId: users-delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      tags:
        - users
        - delete
      description: Delete resource using URL path identifier
  /articles:
    post:
      summary: ''
      operationId: articles-post
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: Location header of created model unique identifier
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
            examples:
              Example 1:
                value:
                  slug: Innovate-the-cross-platform-integration-for-API
                  title: 'Leveraging AI to Transform Data Analytics: Innovative Strategies for Enhanced Decision-Making'
                  description: Explore the groundbreaking advancements in machine learning that are driving the future of artificial intelligence. Delve into innovative algorithms and applications transforming
                  body: 'In recent years, the field of artificial intelligence (AI) has seen significant advancements, transforming various industries and our daily lives. From healthcare to finance, AI applications are enhancing efficiency, accuracy, and decision-making processes. Machine learning, a subset of AI, plays a crucial role in this transformation. By leveraging large datasets, machine learning algorithms can identify patterns, make predictions, and even improve over time without explicit programming.  One notable example is the use of AI in healthcare. AI-powered systems can analyze medical images with remarkable precision, assisting doctors in diagnosing diseases like cancer at an early stage. In finance, AI algorithms are revolutionizing trading strategies, risk management, and fraud detection, leading to more secure and efficient financial systems.  Moreover, AI is making strides in natural language processing (NLP), enabling more sophisticated human-computer interactions. Virtual assistants like Siri and Alexa, powered by NLP, are becoming integral parts of our lives, helping us with tasks ranging from setting reminders to controlling smart home devices.'
                  tagList:
                    - value: demo
                  favorited: true
                  favoritesCount: 5
      description: Create resource
      tags:
        - users
        - post
    get:
      summary: ''
      operationId: articles-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseEntity'
                  - $ref: '#/components/schemas/Article'
              examples:
                Example 1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
                    slug: Innovate-the-cross-platform-integration-for-API
                    title: 'Leveraging AI to Transform Data Analytics: Innovative Strategies for Enhanced Decision-Making'
                    description: Explore the groundbreaking advancements in machine learning that are driving the future of artificial intelligence. Delve into innovative algorithms and applications transforming
                    body: 'In recent years, the field of artificial intelligence (AI) has seen significant advancements, transforming various industries and our daily lives. From healthcare to finance, AI applications are enhancing efficiency, accuracy, and decision-making processes. Machine learning, a subset of AI, plays a crucial role in this transformation. By leveraging large datasets, machine learning algorithms can identify patterns, make predictions, and even improve over time without explicit programming.  One notable example is the use of AI in healthcare. AI-powered systems can analyze medical images with remarkable precision, assisting doctors in diagnosing diseases like cancer at an early stage. In finance, AI algorithms are revolutionizing trading strategies, risk management, and fraud detection, leading to more secure and efficient financial systems.  Moreover, AI is making strides in natural language processing (NLP), enabling more sophisticated human-computer interactions. Virtual assistants like Siri and Alexa, powered by NLP, are becoming integral parts of our lives, helping us with tasks ranging from setting reminders to controlling smart home devices.'
                    tagList:
                      - value: demo
                    favorited: true
                    favoritesCount: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
      tags:
        - users
        - list
  '/articles/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: ''
      operationId: articles-get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/BaseEntity'
                    - $ref: '#/components/schemas/Article'
              examples:
                Example 1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      createdAt: '2019-08-24T14:15:22Z'
                      updatedAt: '2019-08-24T14:15:22Z'
                      slug: Innovate-the-cross-platform-integration-for-API
                      title: 'Leveraging AI to Transform Data Analytics: Innovative Strategies for Enhanced Decision-Making'
                      description: Explore the groundbreaking advancements in machine learning that are driving the future of artificial intelligence. Delve into innovative algorithms and applications transforming
                      body: 'In recent years, the field of artificial intelligence (AI) has seen significant advancements, transforming various industries and our daily lives. From healthcare to finance, AI applications are enhancing efficiency, accuracy, and decision-making processes. Machine learning, a subset of AI, plays a crucial role in this transformation. By leveraging large datasets, machine learning algorithms can identify patterns, make predictions, and even improve over time without explicit programming.  One notable example is the use of AI in healthcare. AI-powered systems can analyze medical images with remarkable precision, assisting doctors in diagnosing diseases like cancer at an early stage. In finance, AI algorithms are revolutionizing trading strategies, risk management, and fraud detection, leading to more secure and efficient financial systems.  Moreover, AI is making strides in natural language processing (NLP), enabling more sophisticated human-computer interactions. Virtual assistants like Siri and Alexa, powered by NLP, are becoming integral parts of our lives, helping us with tasks ranging from setting reminders to controlling smart home devices.'
                      tagList:
                        - value: demo
                      favorited: true
                      favoritesCount: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Find resource using URL path identifier
      tags:
        - users
        - get
    patch:
      summary: ''
      operationId: articles-patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
      description: Edit resource using URL path identifier
      tags:
        - patch
        - articles
    delete:
      summary: ''
      operationId: articles-delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Delete resource using URL path identifier
      tags:
        - users
        - delete
  /comments:
    post:
      summary: ''
      operationId: comments-post
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: Location header of created model unique identifier
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
            examples:
              Example 1:
                value:
                  body: A software developer with a passion for open-source projects.
      description: Create resource
      tags:
        - users
        - post
    get:
      summary: ''
      operationId: comments-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseEntity'
                  - type: object
                    properties:
                      author:
                        $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/Comment'
              examples:
                Example 1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
                    author:
                      name: John Doe
                      username: johndoe
                      email: johndoe@example.com
                      bio: A software developer with a passion for coding and technology.
                      image: 'https://example.com/johndoe.jpg'
                    body: A software developer with a passion for open-source projects.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: List resources
      tags:
        - users
        - list
  '/comment/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: ''
      operationId: comments-get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseEntity'
                  - $ref: '#/components/schemas/Comment'
              examples:
                Example 1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
                    body: A software developer with a passion for open-source projects.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError401'
              examples:
                Example1:
                  value:
                    status: 401
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Find resource using URL path identifier
      tags:
        - users
        - get
    patch:
      summary: ''
      operationId: comments-patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
      description: Edit resource using URL path identifier
      tags:
        - patch
        - articles
    delete:
      summary: ''
      operationId: comments-delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError400'
              examples:
                Example1:
                  value:
                    status: 400
                    message: Validation errors occurred
                    details:
                      - field: username
                        issue: The 'username' field must be between 3 and 20 characters long.
                      - field: email
                        issue: The 'email' field must be a valid email address.
                      - field: password
                        issue: 'The ''password'' field must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.'
                      - field: age
                        issue: The 'age' field must be a number between 18 and 99.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError403'
              examples:
                Example1:
                  value:
                    status: 403
                    message: You do not have permission to access this resource.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError404'
              examples:
                Example1:
                  value:
                    status: 404
                    message: The requested resource was not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError500'
              examples:
                Example1:
                  value:
                    status: 500
                    message: An unexpected error occurred on the server.
      description: Delete resource using URL path identifier
      tags:
        - users
        - delete
components:
  schemas:
    BaseEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        createdAt:
          type: string
          format: date-time
          example: '2019-08-24T14:15:22Z'
        updatedAt:
          type: string
          format: date-time
          example: '2019-08-24T14:15:22Z'
      required:
        - id
        - createdAt
        - updatedAt
      x-examples:
        Example 1:
          id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          createdAt: '2019-08-24T14:15:22Z'
          updatedAt: '2019-08-24T14:15:22Z'
    User:
      type: object
      properties:
        name:
          type: string
          example: John Doe
          minLength: 1
          maxLength: 100
        username:
          type: string
          maxLength: 36
          minLength: 1
          example: johndoe
        email:
          type: string
          format: email
          maxLength: 254
          minLength: 5
          example: johndoe@example.com
        bio:
          type: string
          example: A software developer with a passion for coding and technology.
          maxLength: 100
        image:
          type: string
          format: uri
          example: 'https://example.com/johndoe.jpg'
          maxLength: 100
          minLength: 5
      required:
        - name
        - username
        - email
      x-examples:
        Example 1:
          name: John Doe
          username: johndoe
          email: johndoe@example.com
          bio: A software developer with a passion for coding and technology.
          image: 'https://example.com/johndoe.jpg'
    Article:
      type: object
      x-examples:
        Example 1:
          slug: Innovate-the-cross-platform-integration-for-API
          title: 'Leveraging AI to Transform Data Analytics: Innovative Strategies for Enhanced Decision-Making'
          description: Explore the groundbreaking advancements in machine learning that are driving the future of artificial intelligence. Delve into innovative algorithms and applications transforming industries and everyday life.
          body: 'In recent years, the field of artificial intelligence (AI) has seen significant advancements, transforming various industries and our daily lives. From healthcare to finance, AI applications are enhancing efficiency, accuracy, and decision-making processes. Machine learning, a subset of AI, plays a crucial role in this transformation. By leveraging large datasets, machine learning algorithms can identify patterns, make predictions, and even improve over time without explicit programming.  One notable example is the use of AI in healthcare. AI-powered systems can analyze medical images with remarkable precision, assisting doctors in diagnosing diseases like cancer at an early stage. In finance, AI algorithms are revolutionizing trading strategies, risk management, and fraud detection, leading to more secure and efficient financial systems.  Moreover, AI is making strides in natural language processing (NLP), enabling more sophisticated human-computer interactions. Virtual assistants like Siri and Alexa, powered by NLP, are becoming integral parts of our lives, helping us with tasks ranging from setting reminders to controlling smart home devices.'
          tagList:
            - value: demo
          favorited: true
          favoritesCount: 5
      properties:
        slug:
          type: string
          example: Innovate-the-cross-platform-integration-for-API
          maxLength: 50
          minLength: 1
        title:
          type: string
          example: 'Leveraging AI to Transform Data Analytics: Innovative Strategies for Enhanced Decision-Making'
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: Explore the groundbreaking advancements in machine learning that are driving the future of artificial intelligence. Delve into innovative algorithms and applications transforming
          minLength: 1
          maxLength: 200
        body:
          type: string
          example: 'In recent years, the field of artificial intelligence (AI) has seen significant advancements, transforming various industries and our daily lives. From healthcare to finance, AI applications are enhancing efficiency, accuracy, and decision-making processes. Machine learning, a subset of AI, plays a crucial role in this transformation. By leveraging large datasets, machine learning algorithms can identify patterns, make predictions, and even improve over time without explicit programming.  One notable example is the use of AI in healthcare. AI-powered systems can analyze medical images with remarkable precision, assisting doctors in diagnosing diseases like cancer at an early stage. In finance, AI algorithms are revolutionizing trading strategies, risk management, and fraud detection, leading to more secure and efficient financial systems.  Moreover, AI is making strides in natural language processing (NLP), enabling more sophisticated human-computer interactions. Virtual assistants like Siri and Alexa, powered by NLP, are becoming integral parts of our lives, helping us with tasks ranging from setting reminders to controlling smart home devices.'
        tagList:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        favorited:
          type: boolean
        favoritesCount:
          type: integer
          example: 5
      required:
        - slug
        - title
        - description
        - body
    SignIn:
      title: SignIn
      type: object
      properties:
        email:
          type: string
          maxLength: 254
          minLength: 5
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: P@ssw0rd1#
          maxLength: 50
          minLength: 6
      required:
        - email
        - password
    SignUp:
      title: SignUp
      allOf:
        - $ref: '#/components/schemas/SignIn'
        - type: object
          properties:
            username:
              type: string
              maxLength: 36
              minLength: 1
              example: johndoe
          required:
            - username
    Comment:
      type: object
      properties:
        body:
          type: string
          example: A software developer with a passion for open-source projects.
          maxLength: 500
          minLength: 1
      required:
        - body
    Tag:
      title: Tag
      x-stoplight:
        id: yf7j8x6nevflw
      type: object
      properties:
        value:
          type: string
          x-stoplight:
            id: 31wcm0gm2bp8a
          maxLength: 20
          minLength: 1
          example: demo
    ResponseError400:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError401:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError403:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError404:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
    ResponseError500:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
tags:
  - name: articles
  - name: auth
  - name: delete
  - name: get
  - name: list
  - name: patch
  - name: post
  - name: update
  - name: users
