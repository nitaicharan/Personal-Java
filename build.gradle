plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.openapi.generator' version '7.7.0'
}

group = 'personalspring'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:[2.6.0,2.7.0)'
    implementation 'org.springdoc:springdoc-openapi-ui:[1.8.0,1.9.0)'
    implementation 'org.glassfish.jersey.core:jersey-server'
    implementation 'org.glassfish.jersey.core:jersey-server'
    implementation 'org.glassfish.jersey.core:jersey-common'

    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.flywaydb:flyway-database-postgresql'
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api'
    implementation 'org.postgresql:postgresql'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
    useJUnitPlatform()
}

openApiGenerate {
    inputSpec = "$projectDir/src/main/resources/api/openapi.yaml"
    outputDir = "$buildDir/generated/openapi"
    generatorName = "spring"
    apiPackage = "personalspring.infrastructure.api"
    modelPackage = "personalspring.infrastructure.dto"
    modelNameSuffix = "Dto"
    configOptions = [
        openApiNullable: "false",
        useJakartaEe     : 'true',
        generateBuilders : 'true',
        delegatePattern  : 'true',
        serializableModel: 'true',
        modelNameSuffix: 'true'
    ]
}

tasks.compileJava {
    dependsOn tasks.openApiGenerate
}
bootRun {
}

springBoot {
    mainClass = 'personalspring.PersonalSpringApplication'
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/openapi/src/main/java"
        }
    }
}

bootRun {
    environment 'spring.output.ansi.console-available', true
    // jvmArgs = [
    //     "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005,"
    // ]
}
